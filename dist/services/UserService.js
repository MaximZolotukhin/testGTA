import { User } from '../model/User.js';
import { AppDataSource } from '../data-source.js';
export class UserService {
    async create(dto) {
        const user = new User();
        user.name = dto.name;
        user.email = dto.email;
        user.password = dto.password;
        const userRepository = AppDataSource.getRepository(User);
        const savedUser = await userRepository.save(user);
        return savedUser;
    }
    async validate(email, password) {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email:', email);
        try {
            const userRepository = AppDataSource.getRepository(User);
            console.log('üìÇ –ü–æ–ª—É—á–∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
            const user = await userRepository.findOne({
                where: { email },
                select: ['id', 'name', 'email', 'password', 'createdAt', 'updatedAt'],
            });
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user);
            if (!user) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return null;
            }
            if (user.password === null || user.password === undefined) {
                console.log('‚ùå –ü–∞—Ä–æ–ª—å –ø—É—Å—Ç–æ–π');
                return null;
            }
            if (user.password === password) {
                return user;
            }
            console.log('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            return null;
        }
        catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }
}
